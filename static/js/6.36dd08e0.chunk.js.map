{"version":3,"sources":["components/checkout-item/checkout-item.styles.js","components/checkout-item/checkout-item.component.jsx","components/stripe-button/stripe-button.component.jsx","pages/checkout/checkout.styles.js","pages/checkout/checkout.component.jsx"],"names":["CheckoutItemContainer","styled","div","ImageContainer","TextContainer","span","QuantityContainer","RemoveButtonContainer","connect","dispatch","clearItem","item","clearItemFromCart","addItem","removeItem","cartItem","name","imageUrl","price","quantity","src","alt","onClick","StripeCheckoutButton","priceForStripe","label","billingAddress","shippingAddress","image","description","amount","panelLabel","token","axios","url","method","data","then","response","alert","catch","error","console","log","JSON","parse","stripeKey","CheckoutPageContainer","CheckoutHeaderContainer","HeaderBlockContainer","TotalContainer","WarningContainer","mapStateToProps","createStructuredSelector","cartItems","selectCartItems","total","selectCartTotal","map","id"],"mappings":"0KAEaA,EAAwBC,IAAOC,IAAV,wUAkBrBC,EAAiBF,IAAOC,IAAV,wHAUdE,EAAgBH,IAAOI,KAAV,6GAQbC,EAAoBL,YAAOG,EAAPH,CAAH,0HAYjBM,EAAwBN,IAAOC,IAAV,uE,OCbnBM,cAAQ,MANI,SAAAC,GAAQ,MAAK,CACtCC,UAAW,SAAAC,GAAI,OAAIF,EAASG,YAAkBD,KAC9CE,QAAS,SAAAF,GAAI,OAAIF,EAASI,YAAQF,KAClCG,WAAY,SAAAH,GAAI,OAAIF,EAASK,YAAWH,QAG3BH,EAxBM,SAAC,GAAgD,IAA/CO,EAA8C,EAA9CA,SAAUL,EAAoC,EAApCA,UAAWG,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WAC5CE,EAAmCD,EAAnCC,KAAMC,EAA6BF,EAA7BE,SAAUC,EAAmBH,EAAnBG,MAAOC,EAAYJ,EAAZI,SAC9B,OACA,eAACnB,EAAD,WACE,cAACG,EAAD,UACE,qBAAKiB,IAAKH,EAAUI,IAAI,WAE1B,cAACjB,EAAD,UAAgBY,IAChB,eAACV,EAAD,WACE,qBAAKgB,QAAS,kBAAMR,EAAWC,IAA/B,oBACA,+BAAQI,IACR,qBAAKG,QAAS,kBAAMT,EAAQE,IAA5B,uBAEF,cAACX,EAAD,UAAgBc,IAChB,cAACX,EAAD,CAAuBe,QAAS,kBAAMZ,EAAUK,IAAhD,0B,kCCeWQ,EAtCc,SAAC,GAAa,IAAZL,EAAW,EAAXA,MACvBM,EAAyB,IAARN,EAqBvB,OACE,cAAC,IAAD,CACEO,MAAM,UACNT,KAAK,oBACLU,gBAAc,EACdC,iBAAe,EACfC,MAAM,iCACNC,YAAW,yBAAoBX,GAC/BY,OAAQN,EACRO,WAAW,UACXC,MA5BY,SAAAA,GACdC,IAAM,CACJC,IAAK,UACLC,OAAQ,OACRC,KAAM,CACJN,OAAQN,EACRQ,MAAOA,KAERK,MAAK,SAAAC,GACNC,MAAM,yBACLC,OAAM,SAAAC,GACPC,QAAQC,IAAI,kBAAmBC,KAAKC,MAAMJ,IAC1CF,MACE,2FAgBFO,UA/BmB,iH,QCJZC,EAAwB9C,IAAOC,IAAV,iSAkBrB8C,EAA0B/C,IAAOC,IAAV,+NAYvB+C,EAAuBhD,IAAOC,IAAV,yOAiBpBgD,EAAiBjD,IAAOC,IAAV,2FAMdiD,EAAmBlD,IAAOC,IAAV,2GCRvBkD,EAAkBC,YAAyB,CAC/CC,UAAWC,IACXC,MAAOC,MAGMjD,sBAAQ4C,EAAR5C,EArCM,SAAC,GAAD,IAAE8C,EAAF,EAAEA,UAAWE,EAAb,EAAaA,MAAb,OACnB,eAACT,EAAD,WACE,eAACC,EAAD,WACE,cAACC,EAAD,UACE,6CAEF,cAACA,EAAD,UACE,iDAEF,cAACA,EAAD,UACE,8CAEF,cAACA,EAAD,UACE,2CAEF,cAACA,EAAD,UACE,+CAGHK,EAAUI,KAAI,SAAA3C,GAAQ,OACrB,cAAC,EAAD,CAAgCA,SAAUA,GAAvBA,EAAS4C,OAE9B,eAACT,EAAD,qBAAwBM,KACxB,eAACL,EAAD,sEAEE,uBAFF,iDAKA,cAAC,EAAD,CAAsBjC,MAAOsC","file":"static/js/6.36dd08e0.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const CheckoutItemContainer = styled.div`\n  width: 100%;\n  display: flex;\n  min-height: 100px;\n  border-bottom: 1px solid darkgrey;\n  padding: 15px 0;\n  font-size: 20px;\n  align-items: center;\n\n  @media screen and (max-width: 800px) {\n    font-size: 18px;\n  }\n\n  @media screen and (max-width: 350px) {\n    font-size: 12px;\n  }\n`;\n\nexport const ImageContainer = styled.div`\n  width: 23%;\n  padding-right: 15px;\n\n  img {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nexport const TextContainer = styled.span`\n  width: 23%;\n\n  @media screen and (max-width: 800px) {\n    width: 20%;\n  }\n`;\n\nexport const QuantityContainer = styled(TextContainer)`\n  display: flex;\n\n  span {\n    margin: 0 10px;\n  }\n\n  div {\n    cursor: pointer;\n  }\n`;\n\nexport const RemoveButtonContainer = styled.div`\n  padding-left: 12px;\n  cursor: pointer;\n`;","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport { clearItemFromCart, addItem, removeItem } from '../../redux/cart/cart.actions';\n\nimport {\n  CheckoutItemContainer,\n  ImageContainer,\n  TextContainer,\n  QuantityContainer,\n  RemoveButtonContainer\n} from './checkout-item.styles.js';\n\nconst CheckoutItem = ({cartItem, clearItem, addItem, removeItem}) => {\n  const {name, imageUrl, price, quantity} = cartItem;\n  return(\n  <CheckoutItemContainer>\n    <ImageContainer>\n      <img src={imageUrl} alt='item' />\n    </ImageContainer>\n    <TextContainer>{name}</TextContainer>\n    <QuantityContainer>\n      <div onClick={() => removeItem(cartItem)}>&#10094;</div>\n      <span >{quantity}</span>\n      <div onClick={() => addItem(cartItem)}>&#10095;</div>\n      </QuantityContainer>\n    <TextContainer>{price}</TextContainer>\n    <RemoveButtonContainer onClick={() => clearItem(cartItem)}>&#10005;</RemoveButtonContainer>\n  </CheckoutItemContainer>\n)};\n\nconst mapDispatchToProps = dispatch => ({\n  clearItem: item => dispatch(clearItemFromCart(item)),\n  addItem: item => dispatch(addItem(item)),\n  removeItem: item => dispatch(removeItem(item))\n});\n\nexport default connect(null, mapDispatchToProps)(CheckoutItem);","import React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport axios from 'axios';\n\nconst StripeCheckoutButton = ({price}) => {\n  const priceForStripe = price * 100;\n  const publishableKey = 'pk_test_51IVyV8KznuWoI3kwZSDYt9AjQz7GWOqwzaKZ9fzeu0DKwpJ9Ck041F0RuPo1vg85rRcKsKbRuLjZ8ANVXcUa2FUg00TR72Qy7X';\n\n  const onToken = token => {\n    axios({\n      url: 'payment',\n      method: 'post',\n      data: {\n        amount: priceForStripe,\n        token: token\n      }\n    }).then(response => {\n      alert('Payment successful')\n    }).catch(error => {\n      console.log('Payment error: ', JSON.parse(error));\n      alert(\n        'There was an issue with your payment. Please sure you use the provided credid card.'\n      );\n    });\n  };\n\n  return(\n    <StripeCheckout\n      label='Pay Now'\n      name='My Test Shop Ltd.'\n      billingAddress\n      shippingAddress\n      image='https://svgshare.com/i/CUz.svg'\n      description={`Your total is $${price}`}\n      amount={priceForStripe}\n      panelLabel='Pay Now'\n      token={onToken}\n      stripeKey={publishableKey}\n    />\n  );\n};\n\nexport default StripeCheckoutButton;","import styled from 'styled-components';\n\nexport const CheckoutPageContainer = styled.div`\n  width: 55%;\n  min-height: 90vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 50px auto 0;\n\n  button {\n    margin-left: auto;\n    margin-top: 50px;\n  }\n\n  @media screen and (max-width: 800px) {\n    width: 90%;\n  }\n`;\n\nexport const CheckoutHeaderContainer = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 1px solid darkgrey;\n\n  @media screen and (max-width: 350px) {\n    font-size: 13px;\n  }\n`;\n\nexport const HeaderBlockContainer = styled.div`\n  text-transform: capitalize;\n  width: 23%;\n\n  &:last-child {\n    width: 8%;\n  }\n\n  @media screen and (max-width: 800px) {\n    width: 22%;\n    \n    &:last-child {\n      width: 12%;\n    }\n  }\n`;\n\nexport const TotalContainer = styled.div`\n  margin-top: 30px;\n  margin-left: auto;\n  font-size: 36px;\n`;\n\nexport const WarningContainer = styled.div`\n  text-align: center;\n  margin-top: 40px;\n  font-size: 24px;\n  color: red;\n`;","import React from 'react';\nimport {connect} from 'react-redux';\nimport {createStructuredSelector} from 'reselect';\n\nimport CheckoutItem from '../../components/checkout-item/checkout-item.component';\nimport StripeCheckoutButton from '../../components/stripe-button/stripe-button.component';\n\nimport { selectCartItems, selectCartTotal } from '../../redux/cart/cart.selectors';\n\nimport {CheckoutPageContainer,\n  CheckoutHeaderContainer,\n  HeaderBlockContainer,\n  TotalContainer,\n  WarningContainer} from './checkout.styles.js';\n\nconst CheckoutPage = ({cartItems, total}) => (\n  <CheckoutPageContainer>\n    <CheckoutHeaderContainer>\n      <HeaderBlockContainer>\n        <span>Product</span>\n      </HeaderBlockContainer>\n      <HeaderBlockContainer>\n        <span>Description</span>\n      </HeaderBlockContainer>\n      <HeaderBlockContainer>\n        <span>Quantity</span>\n      </HeaderBlockContainer>\n      <HeaderBlockContainer>\n        <span>Price</span>\n      </HeaderBlockContainer>\n      <HeaderBlockContainer>\n        <span>Remove</span>\n      </HeaderBlockContainer>\n    </CheckoutHeaderContainer>\n    {cartItems.map(cartItem => (\n      <CheckoutItem key={cartItem.id} cartItem={cartItem} />\n    ))}\n    <TotalContainer>TOTAL ${total}</TotalContainer>\n    <WarningContainer>\n      *Please use the following test credit card for payments*\n      <br />\n      4242 4242 4242 4242 - Exp: 01/22 - CVV: 123\n    </WarningContainer>\n    <StripeCheckoutButton price={total} />\n  </CheckoutPageContainer>\n);\n\nconst mapStateToProps = createStructuredSelector({\n  cartItems: selectCartItems,\n  total: selectCartTotal\n});\n\nexport default connect(mapStateToProps)(CheckoutPage);"],"sourceRoot":""}